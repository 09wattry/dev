<!DOCTYPE html>
<!-- saved from url=(0078)https://class.coursera.org/programming2-001/quiz/feedback?submission_id=161791 -->
<html lang="en-US"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta style="visibility: hidden !important; display: block !important; width: 0px !important; height: 0px !important; border-style: none !important;"></head><body><embed id="__IDM__" type="application/x-idm-downloader" style="visibility: hidden !important; display: block !important; width: 1px !important; height: 1px !important; border-style: none !important; position: absolute !important; top: 0px !important; left: 0px !important;" width="1" height="1"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Homework Feedback | Learn to Program: Crafting Quality Code</title>
<link rel="stylesheet" href="week_1_11%2812%29_files/spark.htm">
<link rel="stylesheet" href="week_1_11%2812%29_files/course.css">
<link rel="icon" href="https://spark-public.s3.amazonaws.com/programming2/static/images/favicon.ico">
<script type="text/javascript" src="week_1_11%2812%29_files/MathJax.xml"></script><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuTitle {background-color: #CCCCCC; margin: -1px -1px 1px -1px; text-align: center; font-style: italic; font-size: 80%; color: #444444; padding: 2px 0; overflow: hidden}
.MathJax_MenuArrow {position: absolute; right: .5em; color: #666666}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_Menu_Close {position: absolute; width: 31px; height: 31px; top: -15px; left: -15px}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style>

<div id="MathJax_Message" style="display: none;"></div>
    
    <a href="https://class.coursera.org/programming2-001/quiz/feedback?submission_id=161791#course-page-content" class="hidden">Skip Navigation</a>
    <div class="hidden">
        This page features MathJax technology to render mathematical formulae.
        If you are using a screen reader, please visit <a href="http://www.dessci.com/en/products/mathplayer/">MathPlayer</a> to download the plugin for your browser. Please note that this is an Internet Explorer-only plugin at this time.
    </div>

    <h1 class="hidden">Learn to Program: Crafting Quality Code</h1>

    

<div class="course-topbar container-fluid" role="banner">

    <div class="row-fluid">
        
        <div class="span3">
          <a href="https://www.coursera.org/" class="course-topbar-logo" data-if-linkable="add-referrer"></a>
        </div>

        <div class="course-topbar-nav-container span9" style="float:right;">
            <h2 class="hidden">Top Navigation Bar</h2>

            <ul class="course-topbar-nav-list">
                <li class="course-topbar-nav-list-item">
                  <a href="https://www.coursera.org/courses" data-if-linkable="add-referrer">Courses</a>
                </li>

                                
                <li class="course-topbar-nav-list-item" tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-topbar-my" data-popup="#course-topbar-my" data-popup-bind-open="mouseenter" data-popup-close="" style="cursor:pointer;" data-popup-direction="se">
                                        <a data-user-id="1927476">  
                        Tanmay Kulshrestha 
                        <i class="icon-caret-down"></i>
                    </a>
                </li>
               
                            </ul>
        </div>
    </div>

    <div id="course-topbar-aboutus" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/jobs" target="_new" data-if-linkable="add-referrer">Jobs</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/team" target="_new" data-if-linkable="add-referrer">Team</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/contact" target="_new" data-if-linkable="add-referrer">Contact Us</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/" target="_new" data-if-linkable="add-referrer">About Us</a>
    </div>

    <div id="course-topbar-my" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/" target="_new">Courses</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/profile" target="_new">Profile</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/records" target="_new">Course Records</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/settings" target="_new">Settings</a>
        <a class="course-topbar-sublist-item" href="https://class.coursera.org/programming2-001/class/preferences">Course Preferences</a>
        <a class="course-topbar-sublist-item" href="https://class.coursera.org/programming2-001/auth/logout">Sign Out</a>
    </div>

</div>








<style type="text/css">
 


</style>
<div class="course-topbanner">
  <div class="course-topbanner-university-logo">
    <a href="https://www.coursera.org/utoronto" class="coursera-university-color" target="_blank" data-if-linkable="add-referrer" title="https://www.coursera.org/utoronto">
      <img src="week_1_11%2812%29_files/university_logo.xml" alt="utoronto">
    </a>
  </div>

  
  <h1 class="course-topbanner-header">
      <a class="course-topbanner-name coursera-university-color" href="https://class.coursera.org/programming2-001/class/index" data-if-linkable="modal-lock">
        Learn to Program: Crafting Quality Code      </a>
      <br>
      <span class="course-topbanner-instructor" style="">
        by Jennifer  Campbell, Paul  Gries      </span>
  </h1>
</div>
    
        <div class="container-fluid" style="position:relative;">
        <div class="row-fluid">
            <div id="course-page-sidebar" role="navigation">
                <div class="course-navbar-container">
	<a href="https://class.coursera.org/programming2-001/class/index">
	<img src="week_1_11%2812%29_files/logo.xml" style="width: 205px;height: 116px;margin: -15px 0px 8px 1px; box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.05);" alt="Course Home Page">
	</a>


<h2 class="hidden">Side Navigation Bar</h2>
<ul class="course-navbar-list">
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programming2-001/class/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Home							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programming2-001/lecture/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Video Lectures							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programming2-001/forum/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Discussion Forums							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programming2-001/wiki/view?page=Resources" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Resources							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programming2-001/quiz/index?quiz_type=survey" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Surveys							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programming2-001/quiz/index?quiz_type=homework" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Exercises							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programming2-001/human_grading/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Assignment 1							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programming2-001/assignment/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Assignment 2							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programming2-001/wiki/view?page=courselogistics" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Course Logistics							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programming2-001/wiki/view?page=syllabus" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Syllabus							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programming2-001/wiki/view?page=aboutus" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				About Us							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
	
		<li class="course-navbar-item">
		<a href="https://share.coursera.org/wiki/index.php/programming2:Main" target="_blank" class="coursera-university-color" title="Open course wiki in new window">
			Course Wiki
			<span class="icon-share"></span>
		</a>
	</li>
		
		<li class="course-navbar-item">
		<a href="http://www.meetup.com/Coursera/" target="_blank" class="coursera-university-color">
			Join a Meetup
			<span class="icon-share"></span>
		</a>
	</li>
	
    </ul>

<ul style="list-style-type:none;margin-left: 10px;">
  <li><a href="http://help.coursera.org/" class="coursera-university-color" target="_blank" title="Open help articles in new window"><i class="icon-question-sign"></i> Help Articles</a></li>
</ul>

<ul style="list-style-type:none;margin-left: 10px;">
	
</ul>

</div>
            </div>
            <div id="course-page-content" role="main">
                                

<h2 class="course-page-header">
  <span>
Feedback — Week 1 Exercise  </span>
  
  <a class="coursera-reporter-link" title="Click here if you're experiencing technical problems or found errors in the course materials." target="_blank" href="https://class.coursera.org/programming2-001/class/reporter?url=http%3A%2F%2Fclass.coursera.org%2Fprogramming2-001%2Fquiz%2Ffeedback%3Fsubmission_id%3D161791&amp;area=quiz&amp;title=Week+1+Exercise">
     Help
  </a>
</h2>


<a data-coursera-admin-helpwidget-link="" rel="help" href="http://support.coursera.org/customer/portal/topics/237872-quizzes/articles" title="Quiz documentation" style="display:none;">Learn more</a>
<a data-coursera-admin-helpwidget-link="" rel="discuss" href="https://class.coursera.org/mooc/forum/tag?name=Quiz&amp;forum_id=7" style="display:none;">Discuss</a>







<p class="course-quiz-feedback"> You submitted this homework on <strong>Mon  1 Apr 2013  2:42 AM IST (UTC +0530)</strong>. You got a score of <strong>11.75</strong> out of <strong>12.00</strong>. You can <a href="https://class.coursera.org/programming2-001/quiz/start?quiz_id=76">attempt again</a>, if you'd like.</p>


            <form method="post" id="quiz_form">
    
        <div class="course-quiz-preamble">
        <p>This exercise is about algorithm design.  Plan to spend time 
thinking carefully about each question and each possible answer.  Often,
 questions will not involve code at all, and instead you'll have to 
think about the problem at a higher level.
</p>
<p>As a warning, each time you attempt this exercise, the options may be
 reordered, and you may be presented with different options.</p>    </div>
    
    
    <div class="course-quiz-question-body">
<h3 class="course-quiz-question-number">Question 1</h3>
<div class="course-quiz-question-text">
<p>To determine whether a string is a palindrome, the third algorithm we explored was:</p>

<ol>
<li>Compare the first character to the last character, the second to the second last, and so on.</li>
<li>Stop when the middle of the string is reached. (That means that the middle character is not compared with anything.)</li>
</ol>
<p>
We implemented this algorithm using a <code>while</code> loop, but we could have used a <code>for</code> loop. The Python code is posted on the Lecture Videos webpage, but here is the function header:</p>
<pre>def is_palindrome_v3(s):     
    """ (str) -&gt; bool

    Return True if and only if s is a palindrome.

    &gt;&gt;&gt; is_palindrome_v3('noon')
    True
    &gt;&gt;&gt; is_palindrome_v3('racecar')
    True
    &gt;&gt;&gt; is_palindrome_v3('dented')
    False
    """
</pre>
<p>
The function bodies below all use <code>for</code> loops to try to solve the palindrome problem. Select the one(s) that correctly implement the algorithm. 
</p>
<p>
Hint: try tracing the code on a string of length 1, and then on a string of length 2.
</p>
</div>
<div class="course-quiz-options randomize"></div>
<table class="table">
<tbody><tr>
<th>Your Answer</th>
<th></th>
<th>Score</th>
<th>Explanation</th>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[43017973602bbf9472296aef17efe46d][]" id="gensym_51ebb599e16e5" value="df632b395ee4f787734b88dd0f745ae7" disabled="disabled" type="checkbox"><pre>    for i in range(len(s) // 2 + 1):
        if s[i] != s[len(s) - i - 1]:
            return False

    return True
</pre>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td>This code correctly identifies palindromes, but it compares the middle character and so it doesn't match the algorithm.</td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[43017973602bbf9472296aef17efe46d][]" id="gensym_51ebb599e24e0" value="6149fee338e77ee31191635c8349bd9f" checked="checked" disabled="disabled" type="checkbox"><pre>    j = len(s) - 1
    for i in range(len(s) // 2):
        if s[i] != s[j - i]:
            return False

    return True
</pre>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[43017973602bbf9472296aef17efe46d][]" id="gensym_51ebb599e3282" value="5f243aefcd71c26ba0d0d8ddaa867f19" checked="checked" disabled="disabled" type="checkbox"><pre>    for i in range(len(s) // 2):
        if s[i] != s[len(s) - i - 1]:
            return False

    return True
</pre>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[43017973602bbf9472296aef17efe46d][]" id="gensym_51ebb599e3e72" value="b70edecc5d12e227bb07b7278d87b973" disabled="disabled" type="checkbox"><pre>    for i in range(len(s) // 2):
        if s[i] != s[len(s) - i]:
            return False

    return True 
</pre>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td>What happens if <code>s</code> refers to <code>'aa'</code>?  In the loop, what value does <code>i</code> have on the first iteration?
  What does <code>len(s) - i</code> evaluate to?  What happens when Python tries to look at that index in <code>s</code>?</td>
</tr>
<tr>
<td>Total</td>
<td></td>
<td>1.00 / 1.00</td>
<td></td>
</tr>
</tbody></table>
</div><div class="course-quiz-question-body">
<h3 class="course-quiz-question-number">Question 2</h3>
<div class="course-quiz-question-text">A string <code>s1</code> is an <em>anagram</em> of string <code>s2</code> if its letters can be rearranged to form <code>s2</code>. For example, <code>"listen"</code> is an anagram of <code>"silent"</code>, and <code>"admirer"</code> is an anagram of <code>"married"</code>.  For this question, a word is considered to be an anagram of itself.<br><br>

Consider this code:
<pre>def is_anagram(s1, s2):
    """ (str, str) -&gt; bool

    Return True if and only if s1 is an anagram of s2.

    &gt;&gt;&gt; is_anagram("silent", "listen")
    True
    &gt;&gt;&gt; is_anagram("bear", "breach")
    False
    """
</pre>

Select the algorithm(s) that can be used to implement <code>is_anagram</code>.</div>
<div class="course-quiz-options randomize"></div>
<table class="table">
<tbody><tr>
<th>Your Answer</th>
<th></th>
<th>Score</th>
<th>Explanation</th>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[2c740bcf9d5bf987975762aeb312d4c5][]" id="gensym_51ebb599e7eef" value="4fbb0c313572de0cb9d51c467615de44" disabled="disabled" type="checkbox">For each letter in <code>s1</code>, count the number of occurrences of
the letter in <code>s1</code> and count the number of occurrences of the
letter in <code>s2</code>. If each letter in <code>s1</code>
occurs the same
number of times in <code>s1</code> and <code>s2</code>, then <code>s1</code> is
an anagram of <code>s2</code>.</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td>What happens if <code>s1</code> refers to <code>'a'</code> and <code>s2</code> refers to <code>'ab'</code>?</td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[2c740bcf9d5bf987975762aeb312d4c5][]" id="gensym_51ebb599e8cae" value="a5f4f2e90f32e34b2c14601efaf43c91" disabled="disabled" type="checkbox">For each letter in <code>s2</code>, count the number of occurrences of
the letter in <code>s1</code> and count the number of occurrences of the
letter in <code>s2</code>. If each letter in <code>s2</code>
occurs the same
number of times in <code>s1</code> and <code>s2</code>, then <code>s1</code> is
an anagram of <code>s2</code>.</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td>What happens if <code>s1</code> refers to <code>'ab'</code> and <code>s2</code> refers to <code>'a'</code>?</td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[2c740bcf9d5bf987975762aeb312d4c5][]" id="gensym_51ebb599e9ce6" value="ad07b16c9448f0f320dddc2e8182789b" checked="checked" disabled="disabled" type="checkbox"><ol>
<li>Create a dictionary <code>d1</code> in which each key is a letter from <code>s1</code> and each value is the number of occurrences of that letter in <code>s1</code>.</li>
<li>Create a dictionary <code>d2</code> in which each key is a letter from <code>s2</code> and each value is the number of occurrences of that letter in <code>s2</code>.</li>
<li>If <code>d1 == d2</code>, then <code>s1</code> is an anagram of <code>s2</code>.

</li>
</ol>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[2c740bcf9d5bf987975762aeb312d4c5][]" id="gensym_51ebb599ea9a4" value="65c1eb034c7ff7decc616334d5222a38" checked="checked" disabled="disabled" type="checkbox"><ol>
<li>Create a list <code>L1</code> of the characters in <code>s1</code>.</li>
<li>Create a list <code>L2</code> of the characters in <code>s2</code>.</li>
<li>Sort both lists.</li>
<li>If <code>L1 == L2</code>, <code>s1</code> is an anagram of <code>s2</code>.
</li>
</ol>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td></td>
<td>1.00 / 1.00</td>
<td></td>
</tr>
</tbody></table>
</div><div class="course-quiz-question-body">
<h3 class="course-quiz-question-number">Question 3</h3>
<div class="course-quiz-question-text">Consider this code:

<pre>def count_startswith(L, ch):
    """ (list of str, str) -&gt; int

    Precondition: the length of each item in L is &gt;= 1, and len(ch) == 1

    Return the number of strings in L that begin with ch.

    &gt;&gt;&gt; count_startswith(['rumba', 'salsa', 'samba'], 's')
    2
    """

    ch_strings = []

    for item in L:
        if item[0] == ch:
            ch_strings.append(item)

    return len(ch_strings)
</pre>

Select the algorithm that <em>best</em> describes the approach taken in the function defined above.</div>
<div class="course-quiz-options randomize"></div>
<table class="table">
<tbody><tr>
<th>Your Answer</th>
<th></th>
<th>Score</th>
<th>Explanation</th>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[04fae45e777e666a37042cf0fe64f293][]" id="gensym_51ebb599eec36" value="6523a5801b0541d525320d2a75e53d56" disabled="disabled" type="radio"><ol>
<li> Use an integer accumulator.</li>
<li> For each item in <code>L</code>, if the item begins with <code>ch</code>, add 1 to the accumulator.</li>
<li>Return the accumulator.
</li>
</ol>
</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[04fae45e777e666a37042cf0fe64f293][]" id="gensym_51ebb599ef55d" value="1633130a145f3b23dafc10d6eaddbc96" disabled="disabled" type="radio"><ol>
<li> Create a new list that contains the same values as <code>L</code>.</li>
<li> For each item in <code>L</code>, if the item <em>does not</em> begin with <code>ch</code>, remove it from the new list.</li>
<li>Return the length of the new list.
</li>
</ol>
</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[04fae45e777e666a37042cf0fe64f293][]" id="gensym_51ebb599efd28" value="935c261b5cfe01b6b212589acfe51e05" checked="checked" disabled="disabled" type="radio"><ol>
<li> Use a list accumulator.</li>
<li> For each item in <code>L</code>, if the item begins with <code>ch</code>, add it to the accumulator.</li>
<li>Return the length of the accumulator.
</li>
</ol>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>1.00</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td></td>
<td>1.00 / 1.00</td>
<td></td>
</tr>
</tbody></table>
<div class="course-quiz-question-explanation">
<b>Question Explanation<br><br></b>The accumulator, <code>ch_strings</code>, contains all the strings from <code>L</code> that begin with <code>ch</code>.</div>
</div><div class="course-quiz-question-body">
<h3 class="course-quiz-question-number">Question 4</h3>
<div class="course-quiz-question-text">Consider this function header:
<pre>def count_startswith(L, ch):
    """ (list of str, str) -&gt; int

    Precondition: the length of each item in L is &gt;= 1, and len(ch) == 1

    Return the number of strings in L that begin with ch.

    &gt;&gt;&gt; count_startswith(['rumba', 'salsa', 'samba'], 's')
    2
    """
</pre>

Select the code fragment(s) that correctly implement the function according to the header above.</div>
<div class="course-quiz-options randomize"></div>
<table class="table">
<tbody><tr>
<th>Your Answer</th>
<th></th>
<th>Score</th>
<th>Explanation</th>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[0f5b39add771cabfab799d4fa300f991][]" id="gensym_51ebb599f3e62" value="47451996b9add2fbad7eee4f3815c900" disabled="disabled" type="checkbox"><pre>    startswith = L[:]

    for item in L:
        if item.startswith(ch):
            startswith.remove(item)

    return len(startswith)
</pre>	</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td>This removes strings that start with the <code>ch</code>, and so <code>startswith</code> will refer to the strings that <em>don't</em> start with <code>ch</code>.</td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[0f5b39add771cabfab799d4fa300f991][]" id="gensym_51ebb59a00857" value="412f96b0ba7894bd13e5c6a74539056a" checked="checked" disabled="disabled" type="checkbox"><pre>    count = 0

    for item in L:
	if item.startswith(ch):
	    count = count + 1

    return count
</pre>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[0f5b39add771cabfab799d4fa300f991][]" id="gensym_51ebb59a0141e" value="dfcf439e501cad195e5076bb247004b7" checked="checked" disabled="disabled" type="checkbox"><pre>    startswith = L[:]

    for item in L:
        if item.startswith(ch):
            startswith.remove(item)

    return len(L) - len(startswith)
</pre>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[0f5b39add771cabfab799d4fa300f991][]" id="gensym_51ebb59a02409" value="75ad44a964d3ec69b848cd7f93c97e89" disabled="disabled" type="checkbox"><pre>    count = 0

    for item in L:
        if item.startswith(ch):
	    count = count + 1
	    return count
        else:
	    return count
</pre>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td>A return statement exits the current function, and so this will process only the first string in <code>L</code>.</td>
</tr>
<tr>
<td>Total</td>
<td></td>
<td>1.00 / 1.00</td>
<td></td>
</tr>
</tbody></table>
</div><div class="course-quiz-question-body">
<h3 class="course-quiz-question-number">Question 5</h3>
<div class="course-quiz-question-text">Consider this code, in which <code>s</code> refers to a string:
<pre>    digits = ""

    for ch in s:
        if ch.isdigit():
            digits = digits + ch
</pre>

Select the code fragment(s) that will produce the same value for <code>digits</code>.</div>
<div class="course-quiz-options randomize"></div>
<table class="table">
<tbody><tr>
<th>Your Answer</th>
<th></th>
<th>Score</th>
<th>Explanation</th>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[ae1f1ad58d5e169affea6c3d69570c6f][]" id="gensym_51ebb59a062e9" value="c256979204e2e15fb2f7ae39c8653b8c" disabled="disabled" type="checkbox"><pre>    digits = ''

    for ch in s:
        if ch == '0123456789':
            digits = digits + ch
</pre>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td>This compares <code>ch</code> to the string <code>'0123456789'</code> on every iteration.</td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[ae1f1ad58d5e169affea6c3d69570c6f][]" id="gensym_51ebb59a07073" value="4e36990518e610152fcaa72e9a8709f2" checked="checked" disabled="disabled" type="checkbox"><pre>    digits = ''

    for i in range(len(s)):
        if s[i].isdigit():
            digits = digits + s[i]
</pre>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[ae1f1ad58d5e169affea6c3d69570c6f][]" id="gensym_51ebb59a07d74" value="107f9ca8c6e9c0e4fa30ef738f63969c" checked="checked" disabled="disabled" type="checkbox"><pre>    digits = ''

    for ch in s:
        if ch in '0123456789':
            digits = digits + ch
</pre>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[ae1f1ad58d5e169affea6c3d69570c6f][]" id="gensym_51ebb59a08a92" value="ac1ab292372e6cf5b44e5bccf822c16a" checked="checked" disabled="disabled" type="checkbox"><pre>    indices = []
    digits = ''

    for i in range(len(s)):
        if s[i].isdigit():
            indices.append(i)

    for index in indices:
        digits = digits + s[index]
</pre>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td></td>
<td>1.00 / 1.00</td>
<td></td>
</tr>
</tbody></table>
</div><div class="course-quiz-question-body">
<h3 class="course-quiz-question-number">Question 6</h3>
<div class="course-quiz-question-text">Consider this function header and docstring:

<pre>def is_one_to_one(d):
    """ (dict) -&gt; bool

    Return True if and only if no two of d's keys map to the same value.

    &gt;&gt;&gt; is_one_to_one({'a': 1, 'b': 2, 'c': 3})
    True
    &gt;&gt;&gt; is_one_to_one({'a': 1, 'b': 2, 'c': 1})
    False
    &gt;&gt;&gt; is_one_to_one({})
    True
    """
</pre>

Select the algorithm(s) that can be used to implement <code>is_one_to_one</code>.</div>
<div class="course-quiz-options randomize"></div>
<table class="table">
<tbody><tr>
<th>Your Answer</th>
<th></th>
<th>Score</th>
<th>Explanation</th>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[aa33841df32981c121cd4622f9c89137][]" id="gensym_51ebb59a0c5a4" value="95746d26edbf73d32b7e79de087983cd" checked="checked" disabled="disabled" type="checkbox"><ol>
<li>Put all the values from <code>d</code> into a list.</li>
<li>Make a copy of that list.</li>
<li>Remove all the duplicate items from the second list.</li>
<li>Compare the lengths of the two lists.  If they are equal, return <code>True</code> because that means that there were no duplicate items; otherwise, return <code>False</code>. </li>

</ol>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[aa33841df32981c121cd4622f9c89137][]" id="gensym_51ebb59a0d2d7" value="8e501dbc3c7a01553c447f411e0a69a1" disabled="disabled" type="checkbox"><ol>
<li> Use a list accumulator to keep track of the values we've seen so far.</li>
<li> For each key in <code>d</code>, if the value associated with that key has already been seen, return <code>False</code>; otherwise, return <code>True</code>.</li>
</ol>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[aa33841df32981c121cd4622f9c89137][]" id="gensym_51ebb59a0df0f" value="0a971853d871a07ca76c575277cb6a8b" checked="checked" disabled="disabled" type="checkbox"><ol>
<li> Put all the values from <code>d</code> into a list.</li>
<li> For each value in the list, count how many times it appears in the 
list.  If a value appears more than once in the list, return <code>False</code>.</li>
<li>Once all the values in the list have been processed, return <code>True</code> because we didn't see a duplicate value.</li>

</ol>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[aa33841df32981c121cd4622f9c89137][]" id="gensym_51ebb59a0eb91" value="807a51dbf2bb0e92c84e8720adca9ac3" checked="checked" disabled="disabled" type="checkbox"><ol>
<li> Use a list accumulator to keep track of the values we've seen so far.</li>
<li> For each key in <code>d</code>, if the value associated with that key has already been seen, return <code>False</code>; otherwise, append it to the list of values that we've seen so far.</li>
<li>Once all the keys have been processed, return <code>True</code> because we didn't see a duplicate value.</li>
</ol>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td></td>
<td>1.00 / 1.00</td>
<td></td>
</tr>
</tbody></table>
</div><div class="course-quiz-question-body">
<h3 class="course-quiz-question-number">Question 7</h3>
<div class="course-quiz-question-text">Consider this code:

<pre>def is_one_to_one(d):
    """ (dict) -&gt; bool

    Return True if and only if no two of d's keys map to the same value.

    &gt;&gt;&gt; is_one_to_one({'a': 1, 'b': 2, 'c': 3})
    True
    &gt;&gt;&gt; is_one_to_one({'a': 1, 'b': 2, 'c': 1})
    False
    &gt;&gt;&gt; is_one_to_one({})
    True
    """

    seen = []  # The values that have been seen so far.
    for k in d:
        if d[k] in seen:
            return False
        else:
            seen.append(d[k])

    return True
</pre>

Select the algorithm that <em>best</em> describes the approach taken in the function defined above.</div>
<div class="course-quiz-options randomize"></div>
<table class="table">
<tbody><tr>
<th>Your Answer</th>
<th></th>
<th>Score</th>
<th>Explanation</th>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[be85a2900b8c5665229f8be086399899][]" id="gensym_51ebb59a12ce6" value="5138e35e83a0a08fa8e684b98ecbccb1" disabled="disabled" type="radio"><ol>
<li> Use a list accumulator to keep track of the values we've seen so far.</li>
<li> For each key in <code>d</code>, if the value associated with that key has already been seen, return <code>False</code>.  Otherwise, return <code>True</code>.</li>
</ol>
</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[be85a2900b8c5665229f8be086399899][]" id="gensym_51ebb59a13584" value="fb70e7bc6e5309eace9e22c570d0e117" disabled="disabled" type="radio"><ol>
<li> Put all the values from <code>d</code> into a list.</li>
<li> For each value in the list, count how many times it appears in the 
list.  If a value appears more than once in the list, return <code>False</code>.</li>
<li>Once all the values in the list have been processed, return <code>True</code> because we didn't see a duplicate value.</li>

</ol>
</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[be85a2900b8c5665229f8be086399899][]" id="gensym_51ebb59a13d80" value="1cdf8c7907a0acef4ce8fdd5e6d14c72" checked="checked" disabled="disabled" type="radio"><ol>
<li> Use a list accumulator to keep track of the values we've seen so far.</li>
<li> For each key in <code>d</code>, if the value associated with that key has already been seen, return <code>False</code>.  Otherwise, append it to the list of values that we've seen so far.</li>
<li>Once all the keys have been processed, return <code>True</code> because we didn't see a duplicate value.</li>
</ol>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>1.00</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td></td>
<td>1.00 / 1.00</td>
<td></td>
</tr>
</tbody></table>
</div><div class="course-quiz-question-body">
<h3 class="course-quiz-question-number">Question 8</h3>
<div class="course-quiz-question-text">You are conducting a survey with an ordered list of questions to which people can answer <code>'Y'</code> or <code>'N'</code> ("yes" or "no"). You need to keep track of each person's responses so that you can find out which questions they answered <code>'Y'</code> to and which questions they answered <code>'N'</code> to. Which of the following data structures <em>could be used</em> to represent one person's responses to the questions?</div>
<div class="course-quiz-options randomize"></div>
<table class="table">
<tbody><tr>
<th>Your Answer</th>
<th></th>
<th>Score</th>
<th>Explanation</th>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[fec29438888bb1b3c2269ca977db0c1b][]" id="gensym_51ebb59a17852" value="dd76aa0bba7700d329f363cd4c7f6990" disabled="disabled" type="checkbox"><code>dict of {str: int}</code>, where each key is a response (either <code>'Y'</code> or <code>'N'</code>) and each value is a question number </td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td>This dictionary has only two keys, <code>'Y'</code> and <code>'N'</code>, and only a single number associated with each.</td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[fec29438888bb1b3c2269ca977db0c1b][]" id="gensym_51ebb59a187cc" value="42657155ed617017814c96cefc5bf83c" checked="checked" disabled="disabled" type="checkbox"><code>dict of {str: list of int}</code>, where each key is a response (either <code>'Y'</code> or <code>'N'</code>) and each value is list of question numbers for which the person provided that response</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[fec29438888bb1b3c2269ca977db0c1b][]" id="gensym_51ebb59a1942e" value="1175e80b2b8f05ffa42bd8ba28380663" disabled="disabled" type="checkbox"><code>list of str</code>, where each character is either <code>'Y'</code> or <code>'N'</code>
</td>
<td><span class="course-quiz-answer-incorrect" title="Incorrect" alt="Incorrect"><span class="icon-remove" alt="Incorrect"><span class="accessible-text-for-reader">Inorrect</span></span></span></td>
<td>0.00</td>
<td>Because the questions are ordered, you can use indexing to look up a question's response.</td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[fec29438888bb1b3c2269ca977db0c1b][]" id="gensym_51ebb59a1a090" value="f19d1c5bbc9e03e05d9a31fa2813f41f" disabled="disabled" type="checkbox">two <code>list of str</code>, where one list contains all the <code>'Y'</code>s and the other contains all the <code>'N'</code>s  </td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td>With this option, there is no way to know which questions generated which responses.</td>
</tr>
<tr>
<td>Total</td>
<td></td>
<td>0.75 / 1.00</td>
<td></td>
</tr>
</tbody></table>
</div><div class="course-quiz-question-body">
<h3 class="course-quiz-question-number">Question 9</h3>
<div class="course-quiz-question-text">
<p>
A cycling <em>time trial race</em> is a race in which each cyclist aims 
to finish in the fastest time. (All the cyclists start at different 
times, rather than everyone starting at the same time.)  There may be 
ties.
</p>
<p>
Your job is to determine which data structure to use to keep track of 
the names and times of the cyclists. The data structure will initially 
be empty and when a cyclist crosses the finish line, their data will be 
added to the data structure.
</p>
<p>
 Which of the following data structures <em>could be used</em> to represent all the cyclists and their times? You may assume that the names of the cyclists are unique.
</p>
</div>
<div class="course-quiz-options"></div>
<table class="table">
<tbody><tr>
<th>Your Answer</th>
<th></th>
<th>Score</th>
<th>Explanation</th>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[4cb9a5098bd8f025e2d5b8215c999b68][]" id="gensym_51ebb59a1dc69" value="82e6791871699aff29327a5b3d5f688e" checked="checked" disabled="disabled" type="checkbox">A <code>list of [str, float] lists</code>, where each inner list represents <code>[cyclist, time]</code>.  The outer list is ordered from fastest time to slowest time.</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[4cb9a5098bd8f025e2d5b8215c999b68][]" id="gensym_51ebb59a1e9e9" value="af43bb20119c5260bab064a7da0be0e9" checked="checked" disabled="disabled" type="checkbox">A <code>dict of {str: float}</code>, where each key is a cyclist and each value is a time.</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[4cb9a5098bd8f025e2d5b8215c999b68][]" id="gensym_51ebb59a1f69e" value="3f87ba5e9a4796993f5bd3393022a4b6" checked="checked" disabled="disabled" type="checkbox">Parallel lists, where one is a <code>list of str</code> and the other is a <code>list of float</code>:
 the list of cyclists, and the list of their times.  The lists are 
sorted by the order in which the cyclists cross the finish line (which 
is <strong>not</strong> the same as how long they took).</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[4cb9a5098bd8f025e2d5b8215c999b68][]" id="gensym_51ebb59a204ea" value="ddd809b6344a5f0124887f1d1da774e8" disabled="disabled" type="checkbox">A <code>dict of {float: str}</code>, where each key is a time and each value is the cyclist who finished with that time.</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td>If 2 cyclists have the same time, we can't store them both using this data structure.</td>
</tr>
<tr>
<td>Total</td>
<td></td>
<td>1.00 / 1.00</td>
<td></td>
</tr>
</tbody></table>
</div><div class="course-quiz-question-body">
<h3 class="course-quiz-question-number">Question 10</h3>
<div class="course-quiz-question-text">
<p>
This question is a followup to the previous question about cycling time trials.
</p>
<p>
Now that the race is over, you need to determine the three fastest cyclists.  (Assume there are no ties among the top three.)
</p>
<p>
Which data structure will make it easiest to look up the three fastest 
cyclists? You may assume that the names of the cyclists are unique.
</p>
</div>
<div class="course-quiz-options randomize"></div>
<table class="table">
<tbody><tr>
<th>Your Answer</th>
<th></th>
<th>Score</th>
<th>Explanation</th>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[bd6728387d72e869bf3dafb56110df18][]" id="gensym_51ebb59a2400c" value="ca51dd8ce0d0d33787c3980af46bc41c" disabled="disabled" type="radio">A <code>dict of {float: str}</code>, where each key is a time and each value is the cyclist who finished with that time.</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[bd6728387d72e869bf3dafb56110df18][]" id="gensym_51ebb59a24805" value="bd865cef11809ac43937a879117bdf7f" disabled="disabled" type="radio">A <code>dict of {str: float}</code>, where each key is a cyclist and each value is a time.</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[bd6728387d72e869bf3dafb56110df18][]" id="gensym_51ebb59a25246" value="975f25bd4e5484ea9e57afb7359e6c37" checked="checked" disabled="disabled" type="radio">A <code>list of [str, float] lists</code>, where each inner list represents <code>[cyclist, time]</code>.  The outer list is ordered from fastest time to slowest time.</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>1.00</td>
<td>With this option, the fastest cyclists are at index 0, index 1, and index 2.</td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[bd6728387d72e869bf3dafb56110df18][]" id="gensym_51ebb59a261c1" value="2a6c77b1bbcedadc549d99bf183a2791" disabled="disabled" type="radio">Parallel lists, where one is a <code>list of str</code> and the other is a <code>list of float</code>:
 the list of cyclists, and the list of their times.  The lists are 
sorted by the order in which the cyclists cross the finish line (which 
is <strong>not</strong> the same as how long they took).</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td></td>
<td>1.00 / 1.00</td>
<td></td>
</tr>
</tbody></table>
</div><div class="course-quiz-question-body">
<h3 class="course-quiz-question-number">Question 11</h3>
<div class="course-quiz-question-text">A <em>weather file</em> has the following format, where each city line contains a city
name and the number of millimeters of precipitation for each day of that
month.

Monthly data is separated by a single blank line.

<pre>Jan
Toronto: 3.5,0,1.8,0,...
Montreal: 1.5,0,0,0,...
Vancouver: 0,8.6,23.6,19.2,...

Feb
Toronto: 0,0,1.5,1.2,...
Montreal: 0.4,0,0.3,0.4,...
Vancouver: 14,0,0.2,0.2,...

...

Dec
Toronto: 1.3,13.7,0.6,3.8,...
Montreal: 0,7.7,0,6.9,
Vancouver: 15.2,21.4,11.4,14.6,...
</pre>
<p>
This problem involves a <em>weather dictionary</em> in which the keys 
are month names and the values are dictionaries containing information 
about precipitation
in cities for that month.

In each of the nested dictionaries, the keys are city names and the 
values are lists of millimetres of precipitation for each day that 
month, in order. We'll refer to these nested dictionaries as "city to 
precipitation" dictionaries.
</p>
<p>
Select the algorithm(s) that can be used to determine the city that had 
the maximum total precipitation in February.  (You can break ties any 
way you like, or you can assume that there are no ties. Either is fine.)
</p>
</div>
<div class="course-quiz-options randomize"></div>
<table class="table">
<tbody><tr>
<th>Your Answer</th>
<th></th>
<th>Score</th>
<th>Explanation</th>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[859ae3c5f90c98deb6cc18b6c73d7280][]" id="gensym_51ebb59a29b73" value="e0df7d865b890b98fa9f912cb695d2b8" disabled="disabled" type="checkbox"><ol>
<li>Build the weather dictionary.</li>
<li>Look up key <code>'Feb'</code> in the weather dictionary to get the "city to precipitation" dictionary for February.</li>
<li>Invert that dictionary so that the keys are the lists of precipitation amounts and the values are the cities.</li>
<li>For each key in this inverted dictionary, sum the precipitation 
amounts in that list, and keep track of the list that had the largest 
sum.</li>
<li>Once the iteration is complete, whichever list had the most 
precipitation is the key.  To get the answer, look its value up in the 
inverted dictionary to get the corresponding city name.
</li>
</ol>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td>Lists are mutable, and dictionaries can't have mutable values as keys.  Otherwise, this would work!</td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[859ae3c5f90c98deb6cc18b6c73d7280][]" id="gensym_51ebb59a2a8bc" value="7bfc0ee41715f297c65899b7b3272cee" checked="checked" disabled="disabled" type="checkbox"><ol>
<li>Build the weather dictionary.</li>
<li>Look up key <code>'Feb'</code> in the weather dictionary to get the "city to precipitation" dictionary for February.</li>
<li>Create a dictionary where the keys are cities and the values are the
 sum of the precipitation amounts for that city for February.</li>
<li>Find the maximum value in that dictionary of city maximums.  The answer is the key associated with that maximum.</li>
</ol>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[859ae3c5f90c98deb6cc18b6c73d7280][]" id="gensym_51ebb59a2b629" value="bce5d601214c5d568d9f759e59b6d949" checked="checked" disabled="disabled" type="checkbox"><ol>
<li>Build the weather dictionary.</li>
<li>Look up key <code>'Feb'</code> in the weather dictionary to get the "city to precipitation" dictionary for February.</li>
<li>Iterate through the cities in that dictionary, calculating the sum 
of the precipitation amounts for that city.  Keep track of the city that
 has the most precipitation so far.</li>
<li>Once the iteration is complete, whichever city had the most precipitation is the answer.
</li>
</ol>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[859ae3c5f90c98deb6cc18b6c73d7280][]" id="gensym_51ebb59a2c290" value="b4c3ab144c162aca20cebb0b07115f38" disabled="disabled" type="checkbox"><ol>
<li>Build the weather dictionary.</li>
<li>Look up key <code>'Feb'</code> in the weather dictionary to get the "city to precipitation" dictionary for February.</li>
<li>Create a list containing the sum of the precipitation amounts from 
each of the city precipitation lists for February.  Also create a 
parallel list containing the city names.</li>
<li>Sort the list containing the sum of the precipitation amounts so 
that the largest value is last.  The answer is the city in the parallel 
list at the last position.</li>
</ol>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.25</td>
<td>Because the two lists are separate, when we sort one the other is 
not sorted, and so we lose the correspondence between each city and its 
total precipitation.</td>
</tr>
<tr>
<td>Total</td>
<td></td>
<td>1.00 / 1.00</td>
<td></td>
</tr>
</tbody></table>
</div><div class="course-quiz-question-body">
<h3 class="course-quiz-question-number">Question 12</h3>
<div class="course-quiz-question-text">
<p>
This question also involves a weather file and a weather dictionary.  Please see the previous question for details.
</p>
<p>
Select the algorithm(s) that can be used to make a list of the days in 
which no city had precipitation — we'll call this the 
"zero-precipitation list".  Each day should be a tuple of (month name, 
day number).  For example, if all cities in the "city to precipitation" 
dictionary for February had no precipitation on the very first day, then
 <code>('Feb', 1)</code> would be in the resulting list.
</p>
<p>
Note: in the weather dictionary, the list of precipitation amounts 
starts at index 0; to get the corresponding day number for an index, 
just add 1.
</p>
<p>
<strong>Hint:</strong> You will probably find this question easier to do
 if you take notes about the problem on a piece of paper, including 
drawing a small example weather dictionary.
</p>
</div>
<div class="course-quiz-options randomize"></div>
<table class="table">
<tbody><tr>
<th>Your Answer</th>
<th></th>
<th>Score</th>
<th>Explanation</th>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[f523338d7e664ec0863bd6d294bff063][]" id="gensym_51ebb59a2ffad" value="71887a62aafcbbc436c2d560f3d77326" checked="checked" disabled="disabled" type="checkbox"><ol>
<li>Build the weather dictionary.</li>
<li>Create an empty "zero-precipitation" list to accumulate the answer.</li>
<li>Iterate over the months to get each "city to precipitation" dictionary. For each of these dictionaries:</li>
<ol type="a">
<li>Build a dictionary where each key is a city from the current "city 
to precipitation" dictionary, and each value is a list of the day 
numbers on which the city had no precipitation.</li>
<li>Iterate over the values in that dictionary to build a list 
containing the day numbers that appear in all the lists of day numbers.</li>
<li>
Iterate over the list of day numbers, appending tuples containing the 
current month name and the day number to the "zero-precipitation" list.
</li>
</ol>
</ol>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.33</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[f523338d7e664ec0863bd6d294bff063][]" id="gensym_51ebb59a30cbe" value="2f78414e45cdc618cfbd930c4528e9db" checked="checked" disabled="disabled" type="checkbox"><ol>
<li>Build the weather dictionary.</li>
<li>Iterate over the months to get each "city to precipitation" 
dictionary.  Make a "day to precipitation" dictionary where the keys are
 all the days of the year from <code>('Jan', 1)</code> through <code>('Dec', 31)</code> and each value is a list of precipitation amounts for that day, one per city.</li>
<li>Iterate over the "day to precipitation" dictionary, making a list of the (month, day number) tuples where the <b>maximum</b> precipitation among the cities for that day is 0. This is the "zero-precipitation" list.</li>
</ol>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.33</td>
<td></td>
</tr>
<tr>
<td>
<input class="course-quiz-input" name="answer[f523338d7e664ec0863bd6d294bff063][]" id="gensym_51ebb59a31b99" value="9a59aa89cde0e6afd9459338e17170d7" disabled="disabled" type="checkbox"><ol>
<li>Build the weather dictionary.</li>
<li>Iterate over the months to get each "city to precipitation" 
dictionary.  Make a "day to precipitation" dictionary where the keys are
 all the days of the year from <code>('Jan', 1)</code> through <code>('Dec', 31)</code> and each value is a list of precipitation amounts for that day, one per city.</li>
<li>Iterate over the "day to precipitation" dictionary, making a list of the (month, day number) tuples where the <b>minimum</b> precipitation among the cities for that day is 0. This is the "zero-precipitation" list.</li>
</ol>
</td>
<td><span class="course-quiz-answer-correct" title="Correct" alt="Correct"><span class="icon-ok" alt="Correct"><span class="accessible-text-for-reader">Correct</span></span></span></td>
<td>0.33</td>
<td>Instead of looking for the lists where the <em>minimum</em> precipitation amount is 0, the <em>maximum</em> needs to be 0.</td>
</tr>
<tr>
<td>Total</td>
<td></td>
<td>1.00 / 1.00</td>
<td></td>
</tr>
</tbody></table>
</div>
    
        
    

    </form>


            </div>
        </div>
    </div>
        
    
    <script type="text/javascript" async="" src="week_1_11%2812%29_files/204.xml"></script><script type="text/javascript" async="" src="week_1_11%2812%29_files/ga.xml"></script><script src="week_1_11%2812%29_files/spark.xml"></script>

<script type="text/javascript">
    // SET UP THE MULTITRACKER
        window.logger = window.Log({level:"error"});
        var parts = location.host.split(".");
    while(parts.length > 2) { parts.shift(); }

    window.multitracker = window.MultiTracker({logger:window.logger});
    window.multitracker.register('204', window._204 = window._204 || []);
    window.multitracker.register('ga', window._gaq = window._gaq || [], 'google');

    // SET UP GA and 204
    window._gaq.push(['_setAccount', 'UA-28377374-1']);
    window._gaq.push(['_setDomainName', 'coursera.org']);
    window._gaq.push(['_setAllowLinker', true]);  
    window._gaq.push(['_trackPageview']);
    
    window._204.push({key:"pageview", val:{}});
    window._204.push(["client", "spark"]);
    window._204.push(["user", 1927476]);
    window._204.push(["domain", "." + parts.join(".")]);

    // override our multitracker queues with the ga queue when it is ready
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    
      ga.onload = ga.onreadystatechange = function() {
          ga.onreadystatechange = ga.onload = null;
          window.multitracker.get('ga').queue = window._gaq;
      };
    })();

    // override our multitracker queues with the 204 queue when it is ready
    (function() {
      var a = document.createElement('script'); a.type = 'text/javascript'; a.async = true;
      a.src = 'https://eventing.coursera.org/204.min.js';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(a, s);
      a.onload = a.onreadystatechange = function() {
          a.onreadystatechange = a.onload = null;
          window.multitracker.get('204').queue = window._204;
      };
    })();
</script>

<script>
  // Set up shared AB testing object
  (function() {
    window.ab = {};

    // we want to share the 204 session cookie with the AB session cookie...
    var sessionId = AB.makeSession("__204u", {expires:356, domain:"." + location.host});
        var debug = true;
    
    window.ab.user = window.AB(1927476, "user", {debug:debug, tracker:window.multitracker, logger:window.logger});
    window.ab.session = window.AB(sessionId, "session", {debug:debug, tracker:window.multitracker, logger:window.logger});

    if(window.CourseraABExperiments.user) {
        window.ab.user.addExperiments(window.CourseraABExperiments.user);
        window.ab.user.runExperimentsOn("body");
    }

    if(window.CourseraABExperiments.session) {
        window.ab.session.addExperiments(window.CourseraABExperiments.session);
        window.ab.session.runExperimentsOn("body");
    }
  })();
</script>


    <script>
      // Set up help widget
      (function() {
        $("[data-helpwidget]").each(function() {
            window.HelpWidget(this, {tracker: window.multitracker});
        });
       })();
 
        $("[data-readme]").each(function() {
            window.ReadMe(this);
        });
    </script>

    <script src="week_1_11%2812%29_files/modal_focus.xml" type="text/javascript"></script>
    <script src="week_1_11%2812%29_files/get_query_parameters.xml" type="text/javascript"></script>
    <script src="week_1_11%2812%29_files/signature_track.xml" type="text/javascript"></script>
    <script src="week_1_11%2812%29_files/item_list.xml" type="text/javascript"></script>
    <script src="week_1_11%2812%29_files/navbar.xml" type="text/javascript"></script>

    
    <script>
     // Set up help widget
      (function() {
        $("[data-helpwidget]").each(function() {
            window.HelpWidget(this, {tracker: window.multitracker});
        });
       })();
    </script>

    
    <script type="text/x-mathjax-config;executed=true">
MathJax.Hub.Config({
  config: ["MMLorHTML.js"],
  
  styleSheets: [],
  styles: {},

  jax: ["input/TeX"],
  
  extensions: ["tex2jax.js"],

  preJax: null,
  postJax: null,

  preRemoveClass: "MathJax_Preview",

  showProcessingMessages: true,

  messageStyle: "none",
  
  displayAlign: "center",
  displayIndent: "0em",
  
  delayStartupUntil: "none",

  skipStartupTypeset: false,
  
  elements: [],
  
  tex2jax: {
	    inlineMath: [
	                 ['$$','$$'],      // uncomment this for standard TeX math delimiters
	                 ['\\(','\\)']
	                 ],

	                 displayMath: [
	                 ['\\[','\\]']
	                 ],

    skipTags: ["script","noscript","style","textarea","pre","code"],
    ignoreClass: "tex2jax_ignore",
    processClass: "tex2jax_process",
    processEscapes: false,
    processEnvironments: true,
    preview: "TeX"
    
  },
  
  mml2jax: {
    preview: "alttext"
    
  },
  
  jsMath2jax: {
    preview: "TeX"
    
  },

  TeX: {
    TagSide: "right",
    TagIndent: ".8em",
    MultLineWidth: "85%",
    Macros: {},

    extensions: ["AMSmath.js", "AMSsymbols.js"]
    
  },

  //============================================================================
  //
  //  These parameters control the MathML inupt jax.
  //
  MathML: {
    //
    //  This specifies whether to use TeX spacing or MathML spacing when the
    //  HTML-CSS output jax is used.
    //
    useMathMLspacing: false
  },
  
  //============================================================================
  //
  //  These parameters control the HTML-CSS output jax.
  //
  "HTML-CSS": {
    
    scale: 100,
    
    availableFonts: ["STIX","TeX"],
    
    preferredFont: "TeX",
    
    webFont: "TeX",
    
    imageFont: "TeX",
    
    undefinedFamily: "STIXGeneral,'Arial Unicode MS',serif",
      
    showMathMenu: true,

    styles: {},
    
    tooltip: {
      delayPost: 600,          // milliseconds delay before tooltip is posted after mouseover
      delayClear: 600,         // milliseconds delay before tooltip is cleared after mouseout
      offsetX: 10, offsetY: 5  // pixels to offset tooltip from mouse position
    }
  },
  
  //============================================================================
  //
  //  These parameters control the NativeMML output jax.
  //
  NativeMML: {

    scale: 100,

    showMathMenu: true,
    showMathMenuMSIE: true,

    styles: {}
  },
  
  MathMenu: {
    delay: 400,
    
    helpURL: "http://www.mathjax.org/help/user/",

    showRenderer: true,
    showFontMenu: false,
    showContext:  false,

    windowSettings: {
      status: "no", toolbar: "no", locationbar: "no", menubar: "no",
      directories: "no", personalbar: "no", resizable: "yes", scrollbars: "yes",
      width: 100, height: 50
    },
    
    styles: {}
    
  },

  MMLorHTML: {
    prefer: {
      MSIE:    "MML",
      Firefox: "MML",
      Opera:   "HTML",
      other:   "HTML"
    }
  }
});
</script>
<script type="text/javascript">
(function () {

  function loadMathJax() {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://duqnjvq4jwr55.cloudfront.net/2.1/MathJax.js";
    document.getElementsByTagName("head")[0].appendChild(script);
  }

  window.loadOrRefreshMathJax = function(domId) {
    if (window.MathJax) {
      if (domId) {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, domId]);
      } else {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
      }
    } else {
      loadMathJax();
    }
  }
})();
</script>
    <script type="text/javascript">
        var site_base_url = "https:\/\/www.coursera.org\/";
        var site_static_asset_url = "https:\/\/dt5zaw6a98blc.cloudfront.net\/site-static\/";
        var spark_class_short_name = "programming2";
        var spark_class_id = 254;
        var spark_class_url = "\/programming2-001";
        var spark_signature_url = "https:\/\/class.coursera.org\/programming2-001\/signature\/";
        
        var course_strings_name = "Learn to Program: Crafting Quality Code";
        var student_full_name = "Tanmay Kulshrestha";
    </script>

    
<script src="week_1_11%2812%29_files/quiz_timer.xml"></script>
<script src="week_1_11%2812%29_files/get_query_parameters1.xml"></script>
<script src="week_1_11%2812%29_files/quiz_attempt.xml"></script>
<script src="week_1_11%2812%29_files/latex_preview.xml"></script>
<script src="week_1_11%2812%29_files/db_class.xml"></script>
<script>initRunQuery(".test_query", "run_query");</script>
<script type="text/javascript">$(function() { loadOrRefreshMathJax();})</script>




</body></html>